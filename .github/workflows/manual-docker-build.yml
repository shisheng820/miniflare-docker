# .github/workflows/manual-docker-build.yml

name: Manual Docker Build and Push

# 触发器配置：允许手动触发
on:
  workflow_dispatch:
    # 定义手动触发时需要输入的参数
    inputs:
      dockerfile_path:
        description: '要构建的 Dockerfile 在仓库中的路径'
        required: true
        type: string
        default: 'docker-list/proxy.Dockerfile' # 提供一个默认值作为示例
      
      image_name:
        description: '要推送的 Docker 镜像名称 (例如: user/app)'
        required: true
        type: string
        default: 'your-dockerhub-username/my-proxy-app' # 提醒用户修改

      image_tag:
        description: '镜像的标签 (例如: latest, v1.0)'
        required: true
        type: string
        default: 'latest'

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu Runner

    steps:
      # 步骤 1: 检出你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 登录到 Docker Hub
      # 你需要先在 GitHub 仓库中设置好 Secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 3: 设置 Docker Buildx
      # Buildx 是一个 Docker CLI 插件，支持更多高级构建功能
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 4: 构建并推送到 Docker Hub
      # 关键步骤：使用 inputs 中定义的参数
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Docker 构建上下文，'.' 表示仓库根目录
          file: ${{ inputs.dockerfile_path }} # 使用输入的 Dockerfile 路径
          push: true # 设置为 true 才会推送到 Docker Hub
          tags: ${{ inputs.image_name }}:${{ inputs.image_tag }} # 使用输入的镜像名和标签
          cache-from: type=gha # 启用 GitHub Actions 的构建缓存，加快后续构建速度
          cache-to: type=gha,mode=max
